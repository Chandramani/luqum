
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '209F00363C38D3382662325E75C820EC'
    
_lr_action_items = {'TERM':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,23,24,25,26,28,],[2,2,-13,-10,17,-15,17,2,-6,21,2,2,2,-12,-14,17,-11,-13,-4,-5,2,2,2,-9,-7,27,-8,]),'PLUS':([0,1,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,22,23,24,25,28,],[4,4,-13,-10,4,-15,4,4,-6,4,4,4,-12,-14,4,-11,-13,-4,-5,4,4,4,-9,-7,-8,]),'$end':([1,2,3,5,8,10,13,14,16,17,18,19,22,23,24,25,28,],[0,-13,-10,-15,-6,-3,-12,-14,-11,-13,-4,-5,-1,-2,-9,-7,-8,]),'RBRACKET':([27,],[28,]),'TO':([0,1,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,28,],[5,5,-13,-10,5,-15,5,5,-6,5,5,5,-12,-14,5,-11,-13,-4,-5,5,26,5,5,-9,-7,-8,]),'AND_OP':([1,2,3,5,8,10,13,14,16,17,18,19,20,22,23,24,25,28,],[12,-13,-10,-15,-6,12,-12,-14,-11,-13,-4,-5,12,12,-2,-9,-7,-8,]),'RPAREN':([2,3,5,8,10,13,14,16,17,18,19,20,22,23,24,25,28,],[-13,-10,-15,-6,-3,-12,-14,-11,-13,-4,-5,25,-1,-2,-9,-7,-8,]),'COLUMN':([2,],[15,]),'PHRASE':([0,1,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,22,23,24,25,28,],[3,3,-13,-10,3,-15,3,3,-6,3,3,3,-12,-14,3,-11,-13,-4,-5,3,3,3,-9,-7,-8,]),'APPROX':([2,3,17,],[14,16,14,]),'MINUS':([0,1,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,22,23,24,25,28,],[6,6,-13,-10,6,-15,6,6,-6,6,6,6,-12,-14,6,-11,-13,-4,-5,6,6,6,-9,-7,-8,]),'LPAREN':([0,1,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,22,23,24,25,28,],[7,7,-13,-10,7,-15,7,7,-6,7,7,7,-12,-14,7,-11,-13,-4,-5,7,7,7,-9,-7,-8,]),'OR_OP':([1,2,3,5,8,10,13,14,16,17,18,19,20,22,23,24,25,28,],[11,-13,-10,-15,-6,11,-12,-14,-11,-13,-4,-5,11,-1,-2,-9,-7,-8,]),'BOOST':([1,2,3,5,8,10,13,14,16,17,18,19,20,22,23,24,25,28,],[13,-13,-10,-15,-6,13,-12,-14,-11,-13,-4,-5,13,13,13,-9,-7,-8,]),'LBRACKET':([0,1,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,22,23,24,25,28,],[9,9,-13,-10,9,-15,9,9,-6,9,9,9,-12,-14,9,-11,-13,-4,-5,9,9,9,-9,-7,-8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,1,7,10,11,12,20,22,23,],[1,10,20,10,22,23,10,10,10,]),'unary_expression':([0,1,4,6,7,10,11,12,15,20,22,23,],[8,8,18,19,8,8,8,8,24,8,8,8,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression OR_OP expression','expression',3,'p_expression_or','parser.py',121),
  ('expression -> expression AND_OP expression','expression',3,'p_expression_and','parser.py',126),
  ('expression -> expression expression','expression',2,'p_expression_and','parser.py',127),
  ('unary_expression -> PLUS unary_expression','unary_expression',2,'p_expression_plus','parser.py',132),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_expression_minus','parser.py',137),
  ('expression -> unary_expression','expression',1,'p_expression_unary','parser.py',142),
  ('unary_expression -> LPAREN expression RPAREN','unary_expression',3,'p_grouping','parser.py',147),
  ('unary_expression -> LBRACKET TERM TO TERM RBRACKET','unary_expression',5,'p_range','parser.py',152),
  ('expression -> TERM COLUMN unary_expression','expression',3,'p_field_search','parser.py',159),
  ('unary_expression -> PHRASE','unary_expression',1,'p_quoting','parser.py',166),
  ('unary_expression -> PHRASE APPROX','unary_expression',2,'p_proximity','parser.py',171),
  ('expression -> expression BOOST','expression',2,'p_boosting','parser.py',176),
  ('unary_expression -> TERM','unary_expression',1,'p_terms','parser.py',181),
  ('unary_expression -> TERM APPROX','unary_expression',2,'p_fuzzy','parser.py',186),
  ('unary_expression -> TO','unary_expression',1,'p_to_as_term','parser.py',192),
]
