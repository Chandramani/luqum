
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '7B9946CA21DD77F51498607AC746F7AD'
    
_lr_action_items = {'$end':([1,2,3,6,7,10,11,14,18,19,22,23,24,26,27,29,],[0,-15,-10,-13,-6,-3,-12,-11,-5,-14,-4,-2,-1,-9,-7,-8,]),'RPAREN':([2,3,6,7,10,11,14,18,19,21,22,23,24,26,27,29,],[-15,-10,-13,-6,-3,-12,-11,-5,-14,27,-4,-2,-1,-9,-7,-8,]),'PLUS':([0,1,2,3,5,6,7,8,9,10,11,12,13,14,18,19,20,21,22,23,24,26,27,29,],[9,9,-15,-10,9,-13,-6,9,9,9,-12,9,9,-11,-5,-14,9,9,-4,9,9,-9,-7,-8,]),'TO':([0,1,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,27,29,],[2,2,-15,-10,2,-13,-6,2,2,2,-12,2,2,-11,-16,-17,25,-5,-14,2,2,-4,2,2,-9,-7,-8,]),'BOOST':([1,2,3,6,7,10,11,14,18,19,21,22,23,24,26,27,29,],[11,-15,-10,-13,-6,11,-12,-11,-5,-14,11,-4,11,11,-9,-7,-8,]),'PHRASE':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,18,19,20,21,22,23,24,25,26,27,29,],[3,3,-15,-10,16,3,-13,-6,3,3,3,-12,3,3,-11,-5,-14,3,3,-4,3,3,16,-9,-7,-8,]),'LBRACKET':([0,1,2,3,5,6,7,8,9,10,11,12,13,14,18,19,20,21,22,23,24,26,27,29,],[4,4,-15,-10,4,-13,-6,4,4,4,-12,4,4,-11,-5,-14,4,4,-4,4,4,-9,-7,-8,]),'APPROX':([3,6,],[14,19,]),'RBRACKET':([15,16,28,],[-16,-17,29,]),'MINUS':([0,1,2,3,5,6,7,8,9,10,11,12,13,14,18,19,20,21,22,23,24,26,27,29,],[5,5,-15,-10,5,-13,-6,5,5,5,-12,5,5,-11,-5,-14,5,5,-4,5,5,-9,-7,-8,]),'TERM':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,18,19,20,21,22,23,24,25,26,27,29,],[6,6,-15,-10,15,6,-13,-6,6,6,6,-12,6,6,-11,-5,-14,6,6,-4,6,6,15,-9,-7,-8,]),'LPAREN':([0,1,2,3,5,6,7,8,9,10,11,12,13,14,18,19,20,21,22,23,24,26,27,29,],[8,8,-15,-10,8,-13,-6,8,8,8,-12,8,8,-11,-5,-14,8,8,-4,8,8,-9,-7,-8,]),'OR_OP':([1,2,3,6,7,10,11,14,18,19,21,22,23,24,26,27,29,],[13,-15,-10,-13,-6,13,-12,-11,-5,-14,13,-4,-2,-1,-9,-7,-8,]),'COLUMN':([6,],[20,]),'AND_OP':([1,2,3,6,7,10,11,14,18,19,21,22,23,24,26,27,29,],[12,-15,-10,-13,-6,12,-12,-11,-5,-14,12,-4,-2,12,-9,-7,-8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'phrase_or_term':([4,25,],[17,28,]),'expression':([0,1,8,10,12,13,21,23,24,],[1,10,21,10,23,24,10,10,10,]),'unary_expression':([0,1,5,8,9,10,12,13,20,21,23,24,],[7,7,18,7,22,7,7,7,26,7,7,7,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression OR_OP expression','expression',3,'p_expression_or','parser.py',132),
  ('expression -> expression AND_OP expression','expression',3,'p_expression_and','parser.py',137),
  ('expression -> expression expression','expression',2,'p_expression_implicit','parser.py',142),
  ('unary_expression -> PLUS unary_expression','unary_expression',2,'p_expression_plus','parser.py',147),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_expression_minus','parser.py',152),
  ('expression -> unary_expression','expression',1,'p_expression_unary','parser.py',157),
  ('unary_expression -> LPAREN expression RPAREN','unary_expression',3,'p_grouping','parser.py',162),
  ('unary_expression -> LBRACKET phrase_or_term TO phrase_or_term RBRACKET','unary_expression',5,'p_range','parser.py',167),
  ('unary_expression -> TERM COLUMN unary_expression','unary_expression',3,'p_field_search','parser.py',174),
  ('unary_expression -> PHRASE','unary_expression',1,'p_quoting','parser.py',181),
  ('unary_expression -> PHRASE APPROX','unary_expression',2,'p_proximity','parser.py',186),
  ('expression -> expression BOOST','expression',2,'p_boosting','parser.py',191),
  ('unary_expression -> TERM','unary_expression',1,'p_terms','parser.py',196),
  ('unary_expression -> TERM APPROX','unary_expression',2,'p_fuzzy','parser.py',201),
  ('unary_expression -> TO','unary_expression',1,'p_to_as_term','parser.py',207),
  ('phrase_or_term -> TERM','phrase_or_term',1,'p_phrase_or_term','parser.py',212),
  ('phrase_or_term -> PHRASE','phrase_or_term',1,'p_phrase_or_term','parser.py',213),
]
