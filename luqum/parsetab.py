
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '61CF320D7DDA4BD34503A91A717A2CA1'
    
_lr_action_items = {'TERM':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,22,23,24,25,26,27,29,],[1,-13,1,-6,-15,1,-10,1,19,1,-14,1,-12,1,1,1,-4,-11,1,-5,-9,1,1,-7,19,-8,]),'BOOST':([1,2,3,4,6,10,12,13,16,17,18,22,23,24,25,26,29,],[-13,12,-6,-15,-10,-14,-12,12,-4,-11,12,-5,-9,12,12,-7,-8,]),'LPAREN':([0,1,2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,22,23,24,25,26,29,],[7,-13,7,-6,-15,7,-10,7,7,-14,7,-12,7,7,7,-4,-11,7,-5,-9,7,7,-7,-8,]),'AND_OP':([1,2,3,4,6,10,12,13,16,17,18,22,23,24,25,26,29,],[-13,14,-6,-15,-10,-14,-12,14,-4,-11,14,-5,-9,-2,14,-7,-8,]),'TO':([0,1,2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,29,],[4,-13,4,-6,-15,4,-10,4,4,-14,4,-12,4,4,4,-4,-11,4,-16,27,-17,-5,-9,4,4,-7,-8,]),'PLUS':([0,1,2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,22,23,24,25,26,29,],[5,-13,5,-6,-15,5,-10,5,5,-14,5,-12,5,5,5,-4,-11,5,-5,-9,5,5,-7,-8,]),'PHRASE':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,22,23,24,25,26,27,29,],[6,-13,6,-6,-15,6,-10,6,21,6,-14,6,-12,6,6,6,-4,-11,6,-5,-9,6,6,-7,21,-8,]),'$end':([1,2,3,4,6,10,12,13,16,17,22,23,24,25,26,29,],[-13,0,-6,-15,-10,-14,-12,-3,-4,-11,-5,-9,-2,-1,-7,-8,]),'RBRACKET':([19,21,28,],[-16,-17,29,]),'RPAREN':([1,3,4,6,10,12,13,16,17,18,22,23,24,25,26,29,],[-13,-6,-15,-10,-14,-12,-3,-4,-11,26,-5,-9,-2,-1,-7,-8,]),'COLUMN':([1,],[11,]),'OR_OP':([1,2,3,4,6,10,12,13,16,17,18,22,23,24,25,26,29,],[-13,15,-6,-15,-10,-14,-12,15,-4,-11,15,-5,-9,-2,-1,-7,-8,]),'LBRACKET':([0,1,2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,22,23,24,25,26,29,],[8,-13,8,-6,-15,8,-10,8,8,-14,8,-12,8,8,8,-4,-11,8,-5,-9,8,8,-7,-8,]),'APPROX':([1,6,],[10,17,]),'MINUS':([0,1,2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,22,23,24,25,26,29,],[9,-13,9,-6,-15,9,-10,9,9,-14,9,-12,9,9,9,-4,-11,9,-5,-9,9,9,-7,-8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'phrase_or_term':([8,27,],[20,28,]),'expression':([0,2,7,13,14,15,18,24,25,],[2,13,18,13,24,25,13,13,13,]),'unary_expression':([0,2,5,7,9,11,13,14,15,18,24,25,],[3,3,16,3,22,23,3,3,3,3,3,3,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression OR_OP expression','expression',3,'p_expression_or','parser.py',130),
  ('expression -> expression AND_OP expression','expression',3,'p_expression_and','parser.py',135),
  ('expression -> expression expression','expression',2,'p_expression_and','parser.py',136),
  ('unary_expression -> PLUS unary_expression','unary_expression',2,'p_expression_plus','parser.py',141),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_expression_minus','parser.py',146),
  ('expression -> unary_expression','expression',1,'p_expression_unary','parser.py',151),
  ('unary_expression -> LPAREN expression RPAREN','unary_expression',3,'p_grouping','parser.py',156),
  ('unary_expression -> LBRACKET phrase_or_term TO phrase_or_term RBRACKET','unary_expression',5,'p_range','parser.py',161),
  ('unary_expression -> TERM COLUMN unary_expression','unary_expression',3,'p_field_search','parser.py',168),
  ('unary_expression -> PHRASE','unary_expression',1,'p_quoting','parser.py',175),
  ('unary_expression -> PHRASE APPROX','unary_expression',2,'p_proximity','parser.py',180),
  ('expression -> expression BOOST','expression',2,'p_boosting','parser.py',185),
  ('unary_expression -> TERM','unary_expression',1,'p_terms','parser.py',190),
  ('unary_expression -> TERM APPROX','unary_expression',2,'p_fuzzy','parser.py',195),
  ('unary_expression -> TO','unary_expression',1,'p_to_as_term','parser.py',201),
  ('phrase_or_term -> TERM','phrase_or_term',1,'p_phrase_or_term','parser.py',206),
  ('phrase_or_term -> PHRASE','phrase_or_term',1,'p_phrase_or_term','parser.py',207),
]
